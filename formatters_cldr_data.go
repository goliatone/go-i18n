// Code generated by i18n-formatters. DO NOT EDIT.

package i18n

type cldrListPatterns struct {
	Pair   string
	Start  string
	Middle string
	End    string
}

type cldrOrdinalRules struct {
	System string
}

type cldrMeasurementData struct {
	Units map[string]string
}

type cldrPhoneMetadata struct {
	CountryCode    string
	NationalPrefix string
	Groups         []int
}

type cldrBundle struct {
	List        cldrListPatterns
	Ordinal     cldrOrdinalRules
	Measurement cldrMeasurementData
	Phone       cldrPhoneMetadata
}

var cldrBundles = map[string]cldrBundle{
	"en": {
		List: cldrListPatterns{
			Pair:   "{0} and {1}",
			Start:  "{0}, {1}",
			Middle: "{0}, {1}",
			End:    "{0}, and {1}",
		},
		Ordinal: cldrOrdinalRules{
			System: "english",
		},
		Measurement: cldrMeasurementData{
			Units: map[string]string{
				"kg": "kilograms",
				"km": "kilometers",
				"lb": "pounds",
				"m":  "meters",
				"mi": "miles",
			},
		},
		Phone: cldrPhoneMetadata{
			CountryCode:    "",
			NationalPrefix: "",
			Groups:         []int{},
		},
	},
	"es": {
		List: cldrListPatterns{
			Pair:   "{0} y {1}",
			Start:  "",
			Middle: "",
			End:    "{0} y {1}",
		},
		Ordinal: cldrOrdinalRules{
			System: "spanish",
		},
		Measurement: cldrMeasurementData{
			Units: map[string]string{
				"kg": "kilogramos",
				"km": "kil√≥metros",
				"lb": "libras",
				"m":  "metros",
				"mi": "millas",
			},
		},
		Phone: cldrPhoneMetadata{
			CountryCode:    "",
			NationalPrefix: "",
			Groups:         []int{},
		},
	},
}

var generatedCLDRLocales = []string{
	"en",
	"es",
}

func RegisterGeneratedCLDRFormatters(registry *FormatterRegistry) {
	RegisterCLDRFormatters(registry, generatedCLDRLocales...)
}

func GeneratedCLDRLocales() []string {
	return append([]string{}, generatedCLDRLocales...)
}
